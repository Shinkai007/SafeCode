function cov_276lcrix6e(){var path="/Users/shinkai/Documents/cs+\u6BD5\u8BBE/SafeCode/vscodeplugin/safecode/utils/import-utils.js";var hash="dfa250c45b0572dfc5bf31719ba5fadca68fd24c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/shinkai/Documents/cs+\u6BD5\u8BBE/SafeCode/vscodeplugin/safecode/utils/import-utils.js",statementMap:{"0":{start:{line:1,column:25},end:{line:1,column:51}},"1":{start:{line:3,column:0},end:{line:3,column:57}},"2":{start:{line:22,column:18},end:{line:22,column:27}},"3":{start:{line:23,column:2},end:{line:23,column:43}},"4":{start:{line:30,column:4},end:{line:33,column:5}},"5":{start:{line:32,column:6},end:{line:32,column:18}},"6":{start:{line:34,column:4},end:{line:34,column:22}},"7":{start:{line:36,column:4},end:{line:160,column:5}},"8":{start:{line:38,column:23},end:{line:38,column:53}},"9":{start:{line:39,column:6},end:{line:41,column:7}},"10":{start:{line:40,column:8},end:{line:40,column:20}},"11":{start:{line:43,column:22},end:{line:46,column:7}},"12":{start:{line:45,column:17},end:{line:45,column:99}},"13":{start:{line:47,column:6},end:{line:76,column:7}},"14":{start:{line:48,column:23},end:{line:48,column:27}},"15":{start:{line:49,column:8},end:{line:57,column:9}},"16":{start:{line:50,column:27},end:{line:50,column:179}},"17":{start:{line:50,column:73},end:{line:50,column:178}},"18":{start:{line:51,column:10},end:{line:53,column:11}},"19":{start:{line:52,column:12},end:{line:52,column:41}},"20":{start:{line:54,column:15},end:{line:57,column:9}},"21":{start:{line:56,column:10},end:{line:56,column:22}},"22":{start:{line:58,column:24},end:{line:58,column:70}},"23":{start:{line:59,column:8},end:{line:61,column:9}},"24":{start:{line:60,column:10},end:{line:60,column:22}},"25":{start:{line:70,column:8},end:{line:75,column:10}},"26":{start:{line:78,column:24},end:{line:84,column:7}},"27":{start:{line:81,column:10},end:{line:83,column:46}},"28":{start:{line:85,column:6},end:{line:113,column:7}},"29":{start:{line:86,column:23},end:{line:86,column:27}},"30":{start:{line:88,column:8},end:{line:95,column:9}},"31":{start:{line:89,column:10},end:{line:89,column:50}},"32":{start:{line:90,column:15},end:{line:95,column:9}},"33":{start:{line:91,column:10},end:{line:91,column:31}},"34":{start:{line:92,column:15},end:{line:95,column:9}},"35":{start:{line:94,column:10},end:{line:94,column:22}},"36":{start:{line:107,column:8},end:{line:112,column:10}},"37":{start:{line:114,column:6},end:{line:114,column:18}},"38":{start:{line:115,column:11},end:{line:160,column:5}},"39":{start:{line:116,column:6},end:{line:118,column:7}},"40":{start:{line:117,column:8},end:{line:117,column:20}},"41":{start:{line:119,column:22},end:{line:119,column:62}},"42":{start:{line:120,column:6},end:{line:122,column:7}},"43":{start:{line:121,column:8},end:{line:121,column:20}},"44":{start:{line:140,column:6},end:{line:145,column:8}},"45":{start:{line:146,column:11},end:{line:160,column:5}},"46":{start:{line:155,column:6},end:{line:159,column:8}},"47":{start:{line:161,column:4},end:{line:161,column:16}},"48":{start:{line:169,column:4},end:{line:176,column:6}},"49":{start:{line:184,column:4},end:{line:184,column:97}}},fnMap:{"0":{name:"getImportAccessPath",decl:{start:{line:21,column:9},end:{line:21,column:28}},loc:{start:{line:21,column:60},end:{line:186,column:1}},line:21},"1":{name:"getImportAccessPathInternal",decl:{start:{line:29,column:11},end:{line:29,column:38}},loc:{start:{line:29,column:45},end:{line:162,column:3}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:45,column:8},end:{line:45,column:9}},loc:{start:{line:45,column:17},end:{line:45,column:99}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:50,column:59},end:{line:50,column:60}},loc:{start:{line:50,column:73},end:{line:50,column:178}},line:50},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:8},end:{line:80,column:9}},loc:{start:{line:81,column:10},end:{line:83,column:46}},line:81},"5":{name:"isRequireBasedImport",decl:{start:{line:168,column:11},end:{line:168,column:31}},loc:{start:{line:168,column:44},end:{line:177,column:3}},line:168},"6":{name:"isImportDeclaration",decl:{start:{line:183,column:11},end:{line:183,column:30}},loc:{start:{line:183,column:37},end:{line:185,column:3}},line:183}},branchMap:{"0":{loc:{start:{line:30,column:4},end:{line:33,column:5}},type:"if",locations:[{start:{line:30,column:4},end:{line:33,column:5}},{start:{line:30,column:4},end:{line:33,column:5}}],line:30},"1":{loc:{start:{line:36,column:4},end:{line:160,column:5}},type:"if",locations:[{start:{line:36,column:4},end:{line:160,column:5}},{start:{line:36,column:4},end:{line:160,column:5}}],line:36},"2":{loc:{start:{line:39,column:6},end:{line:41,column:7}},type:"if",locations:[{start:{line:39,column:6},end:{line:41,column:7}},{start:{line:39,column:6},end:{line:41,column:7}}],line:39},"3":{loc:{start:{line:45,column:17},end:{line:45,column:99}},type:"binary-expr",locations:[{start:{line:45,column:17},end:{line:45,column:40}},{start:{line:45,column:44},end:{line:45,column:82}},{start:{line:45,column:86},end:{line:45,column:99}}],line:45},"4":{loc:{start:{line:47,column:6},end:{line:76,column:7}},type:"if",locations:[{start:{line:47,column:6},end:{line:76,column:7}},{start:{line:47,column:6},end:{line:76,column:7}}],line:47},"5":{loc:{start:{line:49,column:8},end:{line:57,column:9}},type:"if",locations:[{start:{line:49,column:8},end:{line:57,column:9}},{start:{line:49,column:8},end:{line:57,column:9}}],line:49},"6":{loc:{start:{line:50,column:73},end:{line:50,column:178}},type:"binary-expr",locations:[{start:{line:50,column:73},end:{line:50,column:101}},{start:{line:50,column:105},end:{line:50,column:141}},{start:{line:50,column:145},end:{line:50,column:178}}],line:50},"7":{loc:{start:{line:51,column:10},end:{line:53,column:11}},type:"if",locations:[{start:{line:51,column:10},end:{line:53,column:11}},{start:{line:51,column:10},end:{line:53,column:11}}],line:51},"8":{loc:{start:{line:51,column:14},end:{line:51,column:44}},type:"binary-expr",locations:[{start:{line:51,column:14},end:{line:51,column:22}},{start:{line:51,column:26},end:{line:51,column:44}}],line:51},"9":{loc:{start:{line:54,column:15},end:{line:57,column:9}},type:"if",locations:[{start:{line:54,column:15},end:{line:57,column:9}},{start:{line:54,column:15},end:{line:57,column:9}}],line:54},"10":{loc:{start:{line:59,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:61,column:9}},{start:{line:59,column:8},end:{line:61,column:9}}],line:59},"11":{loc:{start:{line:71,column:16},end:{line:71,column:69}},type:"cond-expr",locations:[{start:{line:71,column:27},end:{line:71,column:54}},{start:{line:71,column:57},end:{line:71,column:69}}],line:71},"12":{loc:{start:{line:81,column:10},end:{line:83,column:46}},type:"binary-expr",locations:[{start:{line:81,column:10},end:{line:81,column:38}},{start:{line:82,column:11},end:{line:82,column:53}},{start:{line:82,column:57},end:{line:82,column:101}},{start:{line:82,column:105},end:{line:82,column:140}},{start:{line:83,column:10},end:{line:83,column:46}}],line:81},"13":{loc:{start:{line:85,column:6},end:{line:113,column:7}},type:"if",locations:[{start:{line:85,column:6},end:{line:113,column:7}},{start:{line:85,column:6},end:{line:113,column:7}}],line:85},"14":{loc:{start:{line:88,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:95,column:9}},{start:{line:88,column:8},end:{line:95,column:9}}],line:88},"15":{loc:{start:{line:90,column:15},end:{line:95,column:9}},type:"if",locations:[{start:{line:90,column:15},end:{line:95,column:9}},{start:{line:90,column:15},end:{line:95,column:9}}],line:90},"16":{loc:{start:{line:92,column:15},end:{line:95,column:9}},type:"if",locations:[{start:{line:92,column:15},end:{line:95,column:9}},{start:{line:92,column:15},end:{line:95,column:9}}],line:92},"17":{loc:{start:{line:108,column:16},end:{line:108,column:42}},type:"cond-expr",locations:[{start:{line:108,column:27},end:{line:108,column:37}},{start:{line:108,column:40},end:{line:108,column:42}}],line:108},"18":{loc:{start:{line:115,column:11},end:{line:160,column:5}},type:"if",locations:[{start:{line:115,column:11},end:{line:160,column:5}},{start:{line:115,column:11},end:{line:160,column:5}}],line:115},"19":{loc:{start:{line:116,column:6},end:{line:118,column:7}},type:"if",locations:[{start:{line:116,column:6},end:{line:118,column:7}},{start:{line:116,column:6},end:{line:118,column:7}}],line:116},"20":{loc:{start:{line:120,column:6},end:{line:122,column:7}},type:"if",locations:[{start:{line:120,column:6},end:{line:122,column:7}},{start:{line:120,column:6},end:{line:122,column:7}}],line:120},"21":{loc:{start:{line:146,column:11},end:{line:160,column:5}},type:"if",locations:[{start:{line:146,column:11},end:{line:160,column:5}},{start:{line:146,column:11},end:{line:160,column:5}}],line:146},"22":{loc:{start:{line:170,column:6},end:{line:175,column:58}},type:"binary-expr",locations:[{start:{line:170,column:6},end:{line:170,column:16}},{start:{line:171,column:6},end:{line:171,column:42}},{start:{line:172,column:6},end:{line:172,column:42}},{start:{line:173,column:6},end:{line:173,column:33}},{start:{line:174,column:6},end:{line:174,column:48}},{start:{line:175,column:6},end:{line:175,column:58}}],line:170},"23":{loc:{start:{line:184,column:11},end:{line:184,column:96}},type:"binary-expr",locations:[{start:{line:184,column:11},end:{line:184,column:15}},{start:{line:184,column:19},end:{line:184,column:52}},{start:{line:184,column:56},end:{line:184,column:96}}],line:184}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0],"23":[0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dfa250c45b0572dfc5bf31719ba5fadca68fd24c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_276lcrix6e=function(){return actualCoverage;};}return actualCoverage;}cov_276lcrix6e();const{findVariable}=(cov_276lcrix6e().s[0]++,require('./find-variable'));cov_276lcrix6e().s[1]++;module.exports.getImportAccessPath=getImportAccessPath;/**
 * @typedef {Object} ImportAccessPathInfo
 * @property {string[]} path
 * @property {boolean} [defaultImport]
 * @property {string} packageName
 * @property {import("estree").SimpleCallExpression | import("estree").ImportDeclaration} node
 */ /**
 * Returns the access path information from a require or import
 *
 * @param {Object} params
 * @param {import("estree").Expression} params.node The node to check.
 * @param {import("eslint").Scope.Scope} params.scope The scope of the given node.
 * @param {string[]} params.packageNames The interesting packages the method is imported from
 * @returns {ImportAccessPathInfo | null}
 */function getImportAccessPath({node,scope,packageNames}){cov_276lcrix6e().f[0]++;const tracked=(cov_276lcrix6e().s[2]++,new Set());cov_276lcrix6e().s[3]++;return getImportAccessPathInternal(node);/**
   * @param {import("estree").Expression} node
   * @returns {ImportAccessPathInfo | null}
   */function getImportAccessPathInternal(node){cov_276lcrix6e().f[1]++;cov_276lcrix6e().s[4]++;if(tracked.has(node)){cov_276lcrix6e().b[0][0]++;cov_276lcrix6e().s[5]++;// Guard infinite loops.
return null;}else{cov_276lcrix6e().b[0][1]++;}cov_276lcrix6e().s[6]++;tracked.add(node);cov_276lcrix6e().s[7]++;if(node.type==='Identifier'){cov_276lcrix6e().b[1][0]++;// Track variables.
const variable=(cov_276lcrix6e().s[8]++,findVariable(scope,node.name));cov_276lcrix6e().s[9]++;if(!variable){cov_276lcrix6e().b[2][0]++;cov_276lcrix6e().s[10]++;return null;}else{cov_276lcrix6e().b[2][1]++;}// Check variables defined in `var foo = ...`.
const declDef=(cov_276lcrix6e().s[11]++,variable.defs.find(/** @returns {def is import("eslint").Scope.Definition & {type: 'Variable'}} */def=>{cov_276lcrix6e().f[2]++;cov_276lcrix6e().s[12]++;return(cov_276lcrix6e().b[3][0]++,def.type==='Variable')&&(cov_276lcrix6e().b[3][1]++,def.node.type==='VariableDeclarator')&&(cov_276lcrix6e().b[3][2]++,def.node.init);}));cov_276lcrix6e().s[13]++;if(declDef){cov_276lcrix6e().b[4][0]++;let propName=(cov_276lcrix6e().s[14]++,null);cov_276lcrix6e().s[15]++;if(declDef.node.id.type==='ObjectPattern'){cov_276lcrix6e().b[5][0]++;const property=(cov_276lcrix6e().s[16]++,declDef.node.id.properties.find(property=>{cov_276lcrix6e().f[3]++;cov_276lcrix6e().s[17]++;return(cov_276lcrix6e().b[6][0]++,property.type==='Property')&&(cov_276lcrix6e().b[6][1]++,property.value.type==='Identifier')&&(cov_276lcrix6e().b[6][2]++,property.value.name===node.name);}));cov_276lcrix6e().s[18]++;if((cov_276lcrix6e().b[8][0]++,property)&&(cov_276lcrix6e().b[8][1]++,!property.computed)){cov_276lcrix6e().b[7][0]++;cov_276lcrix6e().s[19]++;propName=property.key.name;}else{cov_276lcrix6e().b[7][1]++;}}else{cov_276lcrix6e().b[5][1]++;cov_276lcrix6e().s[20]++;if(declDef.node.id.type!=='Identifier'){cov_276lcrix6e().b[9][0]++;cov_276lcrix6e().s[21]++;// Unknown access path
return null;}else{cov_276lcrix6e().b[9][1]++;}}const nesting=(cov_276lcrix6e().s[22]++,getImportAccessPathInternal(declDef.node.init));cov_276lcrix6e().s[23]++;if(!nesting){cov_276lcrix6e().b[10][0]++;cov_276lcrix6e().s[24]++;return null;}else{cov_276lcrix6e().b[10][1]++;}/**
         * Detects:
         * | var something = require('package-name');
         * | something(c);
         * , or
         * | var { propName: something } = require('package-name');
         * | something(c);
         */cov_276lcrix6e().s[25]++;return{path:propName?(cov_276lcrix6e().b[11][0]++,[...nesting.path,propName]):(cov_276lcrix6e().b[11][1]++,nesting.path),defaultImport:nesting.defaultImport,packageName:nesting.packageName,node:nesting.node};}else{cov_276lcrix6e().b[4][1]++;}// Check variables defined in `import foo from ...`.
const importDef=(cov_276lcrix6e().s[26]++,variable.defs.find(/** @returns {def is import("eslint").Scope.Definition & {type: 'ImportBinding'}} */def=>{cov_276lcrix6e().f[4]++;cov_276lcrix6e().s[27]++;return(cov_276lcrix6e().b[12][0]++,def.type==='ImportBinding')&&((cov_276lcrix6e().b[12][1]++,def.node.type==='ImportDefaultSpecifier')||(cov_276lcrix6e().b[12][2]++,def.node.type==='ImportNamespaceSpecifier')||(cov_276lcrix6e().b[12][3]++,def.node.type==='ImportSpecifier'))&&(cov_276lcrix6e().b[12][4]++,isImportDeclaration(def.node.parent));}));cov_276lcrix6e().s[28]++;if(importDef){cov_276lcrix6e().b[13][0]++;let propName=(cov_276lcrix6e().s[29]++,null);let defaultImport;cov_276lcrix6e().s[30]++;if(importDef.node.type==='ImportSpecifier'){cov_276lcrix6e().b[14][0]++;cov_276lcrix6e().s[31]++;propName=importDef.node.imported.name;}else{cov_276lcrix6e().b[14][1]++;cov_276lcrix6e().s[32]++;if(importDef.node.type==='ImportDefaultSpecifier'){cov_276lcrix6e().b[15][0]++;cov_276lcrix6e().s[33]++;defaultImport=true;}else{cov_276lcrix6e().b[15][1]++;cov_276lcrix6e().s[34]++;if(importDef.node.type!=='ImportNamespaceSpecifier'){cov_276lcrix6e().b[16][0]++;cov_276lcrix6e().s[35]++;// Unknown access path
return null;}else{cov_276lcrix6e().b[16][1]++;}}}/**
         * Detects:
         * | import { propName as something } from 'package-name';
         * | something(c);
         * ,
         * | import * as something from 'package-name';
         * | something(c);
         * , or
         * | import something from 'package-name';
         * | something(c);
         */cov_276lcrix6e().s[36]++;return{path:propName?(cov_276lcrix6e().b[17][0]++,[propName]):(cov_276lcrix6e().b[17][1]++,[]),defaultImport:defaultImport,packageName:importDef.node.parent.source.value,node:importDef.node.parent};}else{cov_276lcrix6e().b[13][1]++;}cov_276lcrix6e().s[37]++;return null;}else{cov_276lcrix6e().b[1][1]++;cov_276lcrix6e().s[38]++;if(node.type==='MemberExpression'){cov_276lcrix6e().b[18][0]++;cov_276lcrix6e().s[39]++;if(node.computed){cov_276lcrix6e().b[19][0]++;cov_276lcrix6e().s[40]++;return null;}else{cov_276lcrix6e().b[19][1]++;}const nesting=(cov_276lcrix6e().s[41]++,getImportAccessPathInternal(node.object));cov_276lcrix6e().s[42]++;if(!nesting){cov_276lcrix6e().b[20][0]++;cov_276lcrix6e().s[43]++;return null;}else{cov_276lcrix6e().b[20][1]++;}/**
       * Detects:
       * | var something = require('package-name');
       * | something.propName(c);
       * ,
       * | var { something } = require('package-name');
       * | something.propName(c);
       * ,
       * | import something from 'package-name';
       * | something.propName(c);
       * ,
       * | import * as something from 'package-name';
       * | something.propName(c);
       * , or
       * | import { something } from 'package-name';
       * | something.propName(c);
       */cov_276lcrix6e().s[44]++;return{path:[...nesting.path,node.property.name],defaultImport:nesting.defaultImport,packageName:nesting.packageName,node:nesting.node};}else{cov_276lcrix6e().b[18][1]++;cov_276lcrix6e().s[45]++;if(isRequireBasedImport(node)){cov_276lcrix6e().b[21][0]++;cov_276lcrix6e().s[46]++;/**
       * Detects:
       * | require('package-name');
       * ,
       * | require('package-name').propName(c);
       * , or
       * | require('package-name')(c);
       */return{path:[],packageName:node.arguments[0].value,node};}else{cov_276lcrix6e().b[21][1]++;}}}cov_276lcrix6e().s[47]++;return null;}/**
   * Checks whether the given expression node is a require based import, or not
   * @param {import("estree").Expression} expression
   */function isRequireBasedImport(expression){cov_276lcrix6e().f[5]++;cov_276lcrix6e().s[48]++;return(cov_276lcrix6e().b[22][0]++,expression)&&(cov_276lcrix6e().b[22][1]++,expression.type==='CallExpression')&&(cov_276lcrix6e().b[22][2]++,expression.callee.name==='require')&&(cov_276lcrix6e().b[22][3]++,expression.arguments.length)&&(cov_276lcrix6e().b[22][4]++,expression.arguments[0].type==='Literal')&&(cov_276lcrix6e().b[22][5]++,packageNames.includes(expression.arguments[0].value));}/**
   * Checks whether the given node is a import, or not
   * @param {import("estree").Node} node
   */function isImportDeclaration(node){cov_276lcrix6e().f[6]++;cov_276lcrix6e().s[49]++;return(cov_276lcrix6e().b[23][0]++,node)&&(cov_276lcrix6e().b[23][1]++,node.type==='ImportDeclaration')&&(cov_276lcrix6e().b[23][2]++,packageNames.includes(node.source.value));}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,