/**
 * Identifies eval with expression
 * @author Adam Baldwin
 */'use strict';//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
function cov_1nqhh5amwf(){var path="/Users/shinkai/Documents/cs+\u6BD5\u8BBE/SafeCode/vscodeplugin/safecode/rules/detect-eval-with-expression.js";var hash="363de608115d711fdadbc88bf53dbb400edd1cc3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/shinkai/Documents/cs+\u6BD5\u8BBE/SafeCode/vscodeplugin/safecode/rules/detect-eval-with-expression.js",statementMap:{"0":{start:{line:12,column:0},end:{line:31,column:2}},"1":{start:{line:23,column:4},end:{line:29,column:6}},"2":{start:{line:25,column:8},end:{line:27,column:9}},"3":{start:{line:26,column:10},end:{line:26,column:106}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:10},end:{line:22,column:11}},loc:{start:{line:22,column:29},end:{line:30,column:3}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:22},end:{line:24,column:23}},loc:{start:{line:24,column:38},end:{line:28,column:7}},line:24}},branchMap:{"0":{loc:{start:{line:25,column:8},end:{line:27,column:9}},type:"if",locations:[{start:{line:25,column:8},end:{line:27,column:9}},{start:{line:25,column:8},end:{line:27,column:9}}],line:25},"1":{loc:{start:{line:25,column:12},end:{line:25,column:79}},type:"binary-expr",locations:[{start:{line:25,column:12},end:{line:25,column:39}},{start:{line:25,column:43},end:{line:25,column:79}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"363de608115d711fdadbc88bf53dbb400edd1cc3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nqhh5amwf=function(){return actualCoverage;};}return actualCoverage;}cov_1nqhh5amwf();cov_1nqhh5amwf().s[0]++;module.exports={meta:{type:'error',docs:{description:'Detects "eval(variable)" which can allow an attacker to run arbitrary code inside your process.',category:'Possible Security Vulnerability',recommended:true,url:'https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-eval-with-expression.md'}},create:function(context){cov_1nqhh5amwf().f[0]++;cov_1nqhh5amwf().s[1]++;return{CallExpression:function(node){cov_1nqhh5amwf().f[1]++;cov_1nqhh5amwf().s[2]++;if((cov_1nqhh5amwf().b[1][0]++,node.callee.name==='eval')&&(cov_1nqhh5amwf().b[1][1]++,node.arguments[0].type!=='Literal')){cov_1nqhh5amwf().b[0][0]++;cov_1nqhh5amwf().s[3]++;context.report({node:node,message:`eval with argument of type ${node.arguments[0].type}`});}else{cov_1nqhh5amwf().b[0][1]++;}}};}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW5xaGg1YW13ZiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsIl9jb3ZlcmFnZVNjaGVtYSIsImNvdmVyYWdlIiwiYWN0dWFsQ292ZXJhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwibWV0YSIsImRvY3MiLCJkZXNjcmlwdGlvbiIsImNhdGVnb3J5IiwicmVjb21tZW5kZWQiLCJ1cmwiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ2FsbEV4cHJlc3Npb24iLCJub2RlIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwicmVwb3J0IiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbImRldGVjdC1ldmFsLXdpdGgtZXhwcmVzc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIElkZW50aWZpZXMgZXZhbCB3aXRoIGV4cHJlc3Npb25cbiAqIEBhdXRob3IgQWRhbSBCYWxkd2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUnVsZSBEZWZpbml0aW9uXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWV0YToge1xuICAgIHR5cGU6ICdlcnJvcicsXG4gICAgZG9jczoge1xuICAgICAgZGVzY3JpcHRpb246ICdEZXRlY3RzIFwiZXZhbCh2YXJpYWJsZSlcIiB3aGljaCBjYW4gYWxsb3cgYW4gYXR0YWNrZXIgdG8gcnVuIGFyYml0cmFyeSBjb2RlIGluc2lkZSB5b3VyIHByb2Nlc3MuJyxcbiAgICAgIGNhdGVnb3J5OiAnUG9zc2libGUgU2VjdXJpdHkgVnVsbmVyYWJpbGl0eScsXG4gICAgICByZWNvbW1lbmRlZDogdHJ1ZSxcbiAgICAgIHVybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQtY29tbXVuaXR5L2VzbGludC1wbHVnaW4tc2VjdXJpdHkvYmxvYi9tYWluL2RvY3MvcnVsZXMvZGV0ZWN0LWV2YWwtd2l0aC1leHByZXNzaW9uLm1kJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIENhbGxFeHByZXNzaW9uOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5jYWxsZWUubmFtZSA9PT0gJ2V2YWwnICYmIG5vZGUuYXJndW1lbnRzWzBdLnR5cGUgIT09ICdMaXRlcmFsJykge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0KHsgbm9kZTogbm9kZSwgbWVzc2FnZTogYGV2YWwgd2l0aCBhcmd1bWVudCBvZiB0eXBlICR7bm9kZS5hcmd1bWVudHNbMF0udHlwZX1gIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLFlBQVksQ0FFWjtBQUNBO0FBQ0E7QUFBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsb0hBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLGdIQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFVBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLFFBQUFFLEtBQUEsT0FBQUMsSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsVUFBQUksSUFBQSxpQkFBQUMsSUFBQSxFQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBSyxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFELElBQUEsTUFBQU8sU0FBQSxPQUFBRCxHQUFBLEVBQUFQLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFPLElBQUEsTUFBQUMsU0FBQSxHQUFBVixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxJQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxNQUFBRCxJQUFBLFVBQUFNLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQU8sSUFBQSxlQUFBQyxTQUFBLEdBQUFWLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsTUFBQVUsQ0FBQSwyQkFBQUMsQ0FBQSxlQUFBQyxDQUFBLHVCQUFBQyxlQUFBLDRDQUFBcEIsSUFBQSxpREFBQXFCLFFBQUEsQ0FBQXBCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQWtCLFFBQUEsQ0FBQXRCLElBQUEsR0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUFxQixRQUFBLENBQUF0QixJQUFBLEVBQUFLLFlBQUEsTUFBQWtCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBdEIsSUFBQSxHQU1ZO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBd0IsY0FBQSxXQUFBQSxjQUFBLEVBQUF4QixjQUFBLEdBQUFBLGNBQUEsR0FBQW1CLENBQUEsTUFKWk0sTUFBTSxDQUFDQyxPQUFPLENBQUcsQ0FDZkMsSUFBSSxDQUFFLENBQ0pWLElBQUksQ0FBRSxPQUFPLENBQ2JXLElBQUksQ0FBRSxDQUNKQyxXQUFXLENBQUUsaUdBQWlHLENBQzlHQyxRQUFRLENBQUUsaUNBQWlDLENBQzNDQyxXQUFXLENBQUUsSUFBSSxDQUNqQkMsR0FBRyxDQUFFLGdIQUNQLENBQ0YsQ0FBQyxDQUNEQyxNQUFNLENBQUUsUUFBQUEsQ0FBVUMsT0FBTyxDQUFFLENBQUFsQyxjQUFBLEdBQUFvQixDQUFBLE1BQUFwQixjQUFBLEdBQUFtQixDQUFBLE1BQ3pCLE1BQU8sQ0FDTGdCLGNBQWMsQ0FBRSxRQUFBQSxDQUFVQyxJQUFJLENBQUUsQ0FBQXBDLGNBQUEsR0FBQW9CLENBQUEsTUFBQXBCLGNBQUEsR0FBQW1CLENBQUEsTUFDOUIsR0FBSSxDQUFBbkIsY0FBQSxHQUFBcUIsQ0FBQSxTQUFBZSxJQUFJLENBQUNDLE1BQU0sQ0FBQ3hCLElBQUksR0FBSyxNQUFNLElBQUFiLGNBQUEsR0FBQXFCLENBQUEsU0FBSWUsSUFBSSxDQUFDRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUNyQixJQUFJLEdBQUssU0FBUyxFQUFFLENBQUFqQixjQUFBLEdBQUFxQixDQUFBLFNBQUFyQixjQUFBLEdBQUFtQixDQUFBLE1BQ3ZFZSxPQUFPLENBQUNLLE1BQU0sQ0FBQyxDQUFFSCxJQUFJLENBQUVBLElBQUksQ0FBRUksT0FBTyxDQUFHLDhCQUE2QkosSUFBSSxDQUFDRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUNyQixJQUFLLEVBQUUsQ0FBQyxDQUFDLENBQ2pHLENBQUMsS0FBQWpCLGNBQUEsR0FBQXFCLENBQUEsVUFDSCxDQUNGLENBQUMsQ0FDSCxDQUNGLENBQUMifQ==